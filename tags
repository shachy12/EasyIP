CONNECTION_t	net/conn.h	/^} CONNECTION_t;$/;"	t	typeref:struct:__anon5
CONN__ERROR_TCP_CONNECTION_REFUSED	net/conn.h	/^    CONN__ERROR_TCP_CONNECTION_REFUSED,$/;"	e	enum:__anon4
CONN__ERROR_UDP_PORT_UNREACHABLE	net/conn.h	/^    CONN__ERROR_UDP_PORT_UNREACHABLE,$/;"	e	enum:__anon4
CONN__IDLE	net/conn.h	/^    CONN__IDLE,$/;"	e	enum:__anon1
CONN__TCP	net/conn.h	/^    CONN__TCP,$/;"	e	enum:__anon3
CONN__TCP_RECV_DATA	net/conn.h	/^    CONN__TCP_RECV_DATA$/;"	e	enum:__anon2
CONN__TCP_SEND_DATA	net/conn.h	/^    CONN__TCP_SEND_DATA,$/;"	e	enum:__anon2
CONN__UDP	net/conn.h	/^    CONN__UDP,$/;"	e	enum:__anon3
CONN__UDP_RECV_DATA	net/conn.h	/^    CONN__UDP_RECV_DATA,$/;"	e	enum:__anon2
CONN__UDP_SEND_DATA	net/conn.h	/^    CONN__UDP_SEND_DATA,$/;"	e	enum:__anon2
CONN__WAITING_FOR_CLOSE_SUCCESS	net/conn.h	/^    CONN__WAITING_FOR_CLOSE_SUCCESS,$/;"	e	enum:__anon1
CONN__WAITING_FOR_CONNECT_SUCCESS	net/conn.h	/^    CONN__WAITING_FOR_CONNECT_SUCCESS,$/;"	e	enum:__anon1
CONN__WAITING_FOR_NEW_DATA	net/conn.h	/^    CONN__WAITING_FOR_NEW_DATA,$/;"	e	enum:__anon1
CONN__WAITING_TO_SEND_DATA	net/conn.h	/^    CONN__WAITING_TO_SEND_DATA,$/;"	e	enum:__anon1
CONN__action_t	net/conn.h	/^} CONN__action_t;$/;"	t	typeref:enum:__anon2
CONN__connections_list_g	net/conn.c	/^CONNECTION_t CONN__connections_list_g[EASY_IP_CONNECTION_COUNT] = {{0}};$/;"	v
CONN__create_socket	net/conn.c	/^CONNECTION_t *CONN__create_socket(CONN__type_t type)$/;"	f
CONN__error_t	net/conn.h	/^} CONN__error_t;$/;"	t	typeref:enum:__anon4
CONN__listen	net/conn.c	/^void CONN__listen(CONNECTION_t *self, uint16_t port)$/;"	f
CONN__records_allocator_g	net/conn.c	/^RECORDS_ALLOCATOR_t CONN__records_allocator_g = {0};$/;"	v
CONN__recv	net/conn.c	/^uint16_t CONN__recv(CONNECTION_t *self, uint8_t *buffer, uint16_t length)$/;"	f
CONN__send	net/conn.c	/^uint16_t CONN__send(CONNECTION_t *self, uint8_t *buffer, uint16_t length)$/;"	f
CONN__send_t	net/conn.h	/^typedef bool (*CONN__send_t)(uint8_t *data, uint16_t length);$/;"	t
CONN__sendto	net/conn.c	/^uint16_t CONN__sendto(CONNECTION_t *self, uint8_t *buffer, uint16_t length, IP_ADDRESS_t destination_ip)$/;"	f
CONN__state_t	net/conn.h	/^} CONN__state_t;$/;"	t	typeref:enum:__anon1
CONN__type_t	net/conn.h	/^} CONN__type_t;$/;"	t	typeref:enum:__anon3
IF_FALSE_GOTO	net/utils.h	18;"	d
NET_CONN_H	net/conn.h	2;"	d
NET_UTILS_H	net/utils.h	2;"	d
ON_NULL_GOTO	net/utils.h	25;"	d
RECORDS_ALLOCATOR_FIELD_NAME	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	19;"	d
RECORDS_ALLOCATOR_H	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	2;"	d
RECORDS_ALLOCATOR_INIT	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	22;"	d
RECORDS_ALLOCATOR_NODE	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	20;"	d
RECORDS_ALLOCATOR_NODE	net/conn.h	/^    RECORDS_ALLOCATOR_NODE;$/;"	m	struct:__anon5
RECORDS_ALLOCATOR__allocate	libs/RecordsAllocator/RECORDS_ALLOCATOR.c	/^RECORDS_ALLOCATOR__node_t *RECORDS_ALLOCATOR__allocate(RECORDS_ALLOCATOR_t *allocator)$/;"	f
RECORDS_ALLOCATOR__free	libs/RecordsAllocator/RECORDS_ALLOCATOR.c	/^void RECORDS_ALLOCATOR__free(void *node_p)$/;"	f
RECORDS_ALLOCATOR__init	libs/RecordsAllocator/RECORDS_ALLOCATOR.c	/^void RECORDS_ALLOCATOR__init(RECORDS_ALLOCATOR_t *allocator, void *array, size_t record_size, size_t count)$/;"	f
RECORDS_ALLOCATOR__node_s	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^typedef struct RECORDS_ALLOCATOR__node_s {$/;"	s
RECORDS_ALLOCATOR__node_t	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^} RECORDS_ALLOCATOR__node_t;$/;"	t	typeref:struct:RECORDS_ALLOCATOR__node_s
RECORDS_ALLOCATOR_s	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^struct RECORDS_ALLOCATOR_s {$/;"	s
RECORDS_ALLOCATOR_t	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^typedef struct RECORDS_ALLOCATOR_s RECORDS_ALLOCATOR_t;$/;"	t	typeref:struct:RECORDS_ALLOCATOR_s
action	net/conn.h	/^    CONN__action_t action;$/;"	m	struct:__anon5
allocated_head	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^    RECORDS_ALLOCATOR__node_t *allocated_head;$/;"	m	struct:RECORDS_ALLOCATOR_s
allocator	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^    RECORDS_ALLOCATOR_t *allocator;$/;"	m	struct:RECORDS_ALLOCATOR__node_s
free_head	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^    RECORDS_ALLOCATOR__node_t *free_head;$/;"	m	struct:RECORDS_ALLOCATOR_s
htons	net/utils.h	12;"	d
last_error	net/conn.h	/^    CONN__error_t last_error;$/;"	m	struct:__anon5
next	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^    struct RECORDS_ALLOCATOR__node_s *next;$/;"	m	struct:RECORDS_ALLOCATOR__node_s	typeref:struct:RECORDS_ALLOCATOR__node_s::RECORDS_ALLOCATOR__node_s
ntohs	net/utils.h	10;"	d
ntohs	net/utils.h	8;"	d
prev	libs/RecordsAllocator/RECORDS_ALLOCATOR.h	/^    struct RECORDS_ALLOCATOR__node_s *prev;$/;"	m	struct:RECORDS_ALLOCATOR__node_s	typeref:struct:RECORDS_ALLOCATOR__node_s::RECORDS_ALLOCATOR__node_s
send_function	net/conn.h	/^    CONN__send_t send_function;$/;"	m	struct:__anon5
signal	net/conn.h	/^    EASY_IP_SIGNAL_TYPE signal;$/;"	m	struct:__anon5
source_port	net/conn.h	/^    uint16_t source_port;$/;"	m	struct:__anon5
state	net/conn.h	/^    CONN__state_t state;$/;"	m	struct:__anon5
type	net/conn.h	/^    CONN__type_t type;$/;"	m	struct:__anon5
window	net/conn.h	/^    uint8_t window[EASY_IP_CONNECTION_WINDOW_SIZE];$/;"	m	struct:__anon5
